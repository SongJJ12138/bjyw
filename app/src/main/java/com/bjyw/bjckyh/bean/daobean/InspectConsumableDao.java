package com.bjyw.bjckyh.bean.daobean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECT_CONSUMABLE".
*/
public class InspectConsumableDao extends AbstractDao<InspectConsumable, Long> {

    public static final String TABLENAME = "INSPECT_CONSUMABLE";

    /**
     * Properties of entity InspectConsumable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderIndex = new Property(1, String.class, "orderIndex", false, "ORDER_INDEX");
        public final static Property EquipId = new Property(2, String.class, "equipId", false, "EQUIP_ID");
        public final static Property ConsumableId = new Property(3, String.class, "consumableId", false, "CONSUMABLE_ID");
        public final static Property HandId = new Property(4, String.class, "handId", false, "HAND_ID");
        public final static Property Count = new Property(5, String.class, "count", false, "COUNT");
    }


    public InspectConsumableDao(DaoConfig config) {
        super(config);
    }
    
    public InspectConsumableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECT_CONSUMABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_INDEX\" TEXT," + // 1: orderIndex
                "\"EQUIP_ID\" TEXT," + // 2: equipId
                "\"CONSUMABLE_ID\" TEXT," + // 3: consumableId
                "\"HAND_ID\" TEXT," + // 4: handId
                "\"COUNT\" TEXT);"); // 5: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECT_CONSUMABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InspectConsumable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderIndex = entity.getOrderIndex();
        if (orderIndex != null) {
            stmt.bindString(2, orderIndex);
        }
 
        String equipId = entity.getEquipId();
        if (equipId != null) {
            stmt.bindString(3, equipId);
        }
 
        String consumableId = entity.getConsumableId();
        if (consumableId != null) {
            stmt.bindString(4, consumableId);
        }
 
        String handId = entity.getHandId();
        if (handId != null) {
            stmt.bindString(5, handId);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(6, count);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InspectConsumable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderIndex = entity.getOrderIndex();
        if (orderIndex != null) {
            stmt.bindString(2, orderIndex);
        }
 
        String equipId = entity.getEquipId();
        if (equipId != null) {
            stmt.bindString(3, equipId);
        }
 
        String consumableId = entity.getConsumableId();
        if (consumableId != null) {
            stmt.bindString(4, consumableId);
        }
 
        String handId = entity.getHandId();
        if (handId != null) {
            stmt.bindString(5, handId);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(6, count);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InspectConsumable readEntity(Cursor cursor, int offset) {
        InspectConsumable entity = new InspectConsumable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderIndex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // equipId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // consumableId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // handId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InspectConsumable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderIndex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEquipId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setConsumableId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHandId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InspectConsumable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InspectConsumable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InspectConsumable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
