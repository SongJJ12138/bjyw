package com.bjyw.bjckyh.bean.daobean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECT_ENVIRON_MENT".
*/
public class InspectEnvironMentDao extends AbstractDao<InspectEnvironMent, Long> {

    public static final String TABLENAME = "INSPECT_ENVIRON_MENT";

    /**
     * Properties of entity InspectEnvironMent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OnrderIndex = new Property(1, String.class, "onrderIndex", false, "ONRDER_INDEX");
        public final static Property EnvironmentIndex = new Property(2, String.class, "environmentIndex", false, "ENVIRONMENT_INDEX");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property Picture = new Property(4, String.class, "picture", false, "PICTURE");
        public final static Property Context = new Property(5, String.class, "context", false, "CONTEXT");
        public final static Property Is_unusual = new Property(6, String.class, "is_unusual", false, "IS_UNUSUAL");
    }


    public InspectEnvironMentDao(DaoConfig config) {
        super(config);
    }
    
    public InspectEnvironMentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECT_ENVIRON_MENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ONRDER_INDEX\" TEXT," + // 1: onrderIndex
                "\"ENVIRONMENT_INDEX\" TEXT," + // 2: environmentIndex
                "\"REMARK\" TEXT," + // 3: remark
                "\"PICTURE\" TEXT," + // 4: picture
                "\"CONTEXT\" TEXT," + // 5: context
                "\"IS_UNUSUAL\" TEXT);"); // 6: is_unusual
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECT_ENVIRON_MENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InspectEnvironMent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String onrderIndex = entity.getOnrderIndex();
        if (onrderIndex != null) {
            stmt.bindString(2, onrderIndex);
        }
 
        String environmentIndex = entity.getEnvironmentIndex();
        if (environmentIndex != null) {
            stmt.bindString(3, environmentIndex);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(5, picture);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(6, context);
        }
 
        String is_unusual = entity.getIs_unusual();
        if (is_unusual != null) {
            stmt.bindString(7, is_unusual);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InspectEnvironMent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String onrderIndex = entity.getOnrderIndex();
        if (onrderIndex != null) {
            stmt.bindString(2, onrderIndex);
        }
 
        String environmentIndex = entity.getEnvironmentIndex();
        if (environmentIndex != null) {
            stmt.bindString(3, environmentIndex);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(5, picture);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(6, context);
        }
 
        String is_unusual = entity.getIs_unusual();
        if (is_unusual != null) {
            stmt.bindString(7, is_unusual);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InspectEnvironMent readEntity(Cursor cursor, int offset) {
        InspectEnvironMent entity = new InspectEnvironMent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // onrderIndex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // environmentIndex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // picture
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // context
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // is_unusual
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InspectEnvironMent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOnrderIndex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnvironmentIndex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPicture(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContext(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_unusual(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InspectEnvironMent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InspectEnvironMent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InspectEnvironMent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
